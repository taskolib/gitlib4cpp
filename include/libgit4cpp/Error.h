/**
 * \file   Error.h
 * \author Lars Fröhlich, Jannik Wöhnert
 * \date   Created on June 7, 2023
 * \brief  Definition of the Error exception class.
 *
 * \copyright Copyright 2023 Deutsches Elektronen-Synchrotron (DESY), Hamburg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the license, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// SPDX-License-Identifier: LGPL-2.1-or-later

#ifndef LIBGIT4CPP_ERROR_H_
#define LIBGIT4CPP_ERROR_H_

#include <system_error>

namespace git {

namespace detail {

class git_category_impl : public std::error_category {
    public:
        virtual const char* name() const noexcept;
        virtual std::string message(int ev) const;
};

} // namespace detail

const std::error_category& git_category();

/**
 * An exception class carrying an error code and message.
 *
 * Error is used as the standard exception class throughout libgit4cpp.
 * It can be used directly or inherited from.
 *
 * \code
 * try
 * {
 *     throw git::Error(errorcode, "An error has occurred");
 *     // or throw git::Error("Another error occurred");
 * }
 * catch (const git::Error& e)
 * {
 *     std::cerr << e.what() << "\n";
 * }
 * \endcode
 *
 * If no error code is specified GIT_EUSER is used.
 *
 * \note
 * git::Error is derived from std::system_error. It can therefore be caught by
 * `catch (const std::exception&)`, `catch (const std::runtime_error&)`,
 * `catch (const std::system_error&)`, and `catch (const git::Error&)`.
 */
class Error : public std::system_error
{
public:
    using std::system_error::system_error;
    Error(int ev)
        : std::system_error(ev, git_category())
        { }
    Error(int ev, const std::string& what)
        : std::system_error(ev, git_category(), what)
        { }
    Error(int ev, const char* what)
        : std::system_error(ev, git_category(), what)
        { }
    Error(const std::string& what)
        : std::system_error(static_cast<int>(GIT_EUSER), git_category(), what)
        { }
    Error(const char* what)
        : std::system_error(static_cast<int>(GIT_EUSER), git_category(), what)
        { }

    enum {
        GIT_OK         =  0, ///< No error

        GIT_ERROR      = -1, ///< Generic error
        GIT_ENOTFOUND  = -3, ///< Requested object could not be found
        GIT_EEXISTS    = -4, ///< Object exists preventing operation
        GIT_EAMBIGUOUS = -5, ///< More than one object matches
        GIT_EBUFS      = -6, ///< Output buffer too short to hold data

        /**
         * GIT_EUSER is a special error that is never generated by libgit2
         * code.  You can return it from a callback (e.g to stop an iteration)
         * to know that it was generated by the callback and not by libgit2.
         */
        GIT_EUSER      = -7,

        GIT_EBAREREPO       =  -8, ///< Operation not allowed on bare repository
        GIT_EUNBORNBRANCH   =  -9, ///< HEAD refers to branch with no commits
        GIT_EUNMERGED       = -10, ///< Merge in progress prevented operation
        GIT_ENONFASTFORWARD = -11, ///< Reference was not fast-forwardable
        GIT_EINVALIDSPEC    = -12, ///< Name/ref spec was not in a valid format
        GIT_ECONFLICT       = -13, ///< Checkout conflicts prevented operation
        GIT_ELOCKED         = -14, ///< Lock file prevented operation
        GIT_EMODIFIED       = -15, ///< Reference value does not match expected
        GIT_EAUTH           = -16, ///< Authentication error
        GIT_ECERTIFICATE    = -17, ///< Server certificate is invalid
        GIT_EAPPLIED        = -18, ///< Patch/merge has already been applied
        GIT_EPEEL           = -19, ///< The requested peel operation is not possible
        GIT_EEOF            = -20, ///< Unexpected EOF
        GIT_EINVALID        = -21, ///< Invalid operation or input
        GIT_EUNCOMMITTED    = -22, ///< Uncommitted changes in index prevented operation
        GIT_EDIRECTORY      = -23, ///< The operation is not valid for a directory
        GIT_EMERGECONFLICT  = -24, ///< A merge conflict exists and cannot continue

        GIT_PASSTHROUGH     = -30, ///< A user-configured callback refused to act
        GIT_ITEROVER        = -31, ///< Signals end of iteration with iterator
        GIT_RETRY           = -32, ///< Internal only
        GIT_EMISMATCH       = -33, ///< Hashsum mismatch in object
        GIT_EINDEXDIRTY     = -34, ///< Unsaved changes in the index would be overwritten
        GIT_EAPPLYFAIL      = -35, ///< Patch application failed
        GIT_EOWNER          = -36, ///< The object is not owned by the current user
        GIT_TIMEOUT         = -37  ///< The operation timed out
    };

    /// The error category must be an unique object
    const std::error_category& git_category()
    {
        static detail::git_category_impl instance;
        return instance;
    }

};

} // namespace git

#endif
